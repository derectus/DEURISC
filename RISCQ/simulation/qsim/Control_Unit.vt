// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2019 07:47:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Control_Unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Control_Unit_vlg_sample_tst(
	CLK,
	IR,
	REG1,
	REG2,
	sampler_tx
);
input  CLK;
input [10:0] IR;
input [3:0] REG1;
input [3:0] REG2;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or IR or REG1 or REG2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Control_Unit_vlg_check_tst (
	ALU_OUT,
	ALU_SEL,
	BUS_SEL,
	INC,
	LOAD,
	sampler_rx
);
input [3:0] ALU_OUT;
input [3:0] ALU_SEL;
input [3:0] BUS_SEL;
input [2:0] INC;
input [3:0] LOAD;
input sampler_rx;

reg [3:0] ALU_OUT_expected;
reg [3:0] ALU_SEL_expected;
reg [3:0] BUS_SEL_expected;
reg [2:0] INC_expected;
reg [3:0] LOAD_expected;

reg [3:0] ALU_OUT_prev;
reg [3:0] ALU_SEL_prev;
reg [3:0] BUS_SEL_prev;
reg [2:0] INC_prev;
reg [3:0] LOAD_prev;

reg [3:0] ALU_OUT_expected_prev;
reg [3:0] ALU_SEL_expected_prev;
reg [3:0] BUS_SEL_expected_prev;
reg [2:0] INC_expected_prev;
reg [3:0] LOAD_expected_prev;

reg [3:0] last_ALU_OUT_exp;
reg [3:0] last_ALU_SEL_exp;
reg [3:0] last_BUS_SEL_exp;
reg [2:0] last_INC_exp;
reg [3:0] last_LOAD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_OUT_prev = ALU_OUT;
	ALU_SEL_prev = ALU_SEL;
	BUS_SEL_prev = BUS_SEL;
	INC_prev = INC;
	LOAD_prev = LOAD;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_OUT_expected_prev = ALU_OUT_expected;
	ALU_SEL_expected_prev = ALU_SEL_expected;
	BUS_SEL_expected_prev = BUS_SEL_expected;
	INC_expected_prev = INC_expected;
	LOAD_expected_prev = LOAD_expected;
end


// expected ALU_OUT[ 3 ]
initial
begin
	ALU_OUT_expected[3] = 1'bX;
end 
// expected ALU_OUT[ 2 ]
initial
begin
	ALU_OUT_expected[2] = 1'bX;
end 
// expected ALU_OUT[ 1 ]
initial
begin
	ALU_OUT_expected[1] = 1'bX;
end 
// expected ALU_OUT[ 0 ]
initial
begin
	ALU_OUT_expected[0] = 1'bX;
end 
// expected ALU_SEL[ 3 ]
initial
begin
	ALU_SEL_expected[3] = 1'bX;
end 
// expected ALU_SEL[ 2 ]
initial
begin
	ALU_SEL_expected[2] = 1'bX;
end 
// expected ALU_SEL[ 1 ]
initial
begin
	ALU_SEL_expected[1] = 1'bX;
end 
// expected ALU_SEL[ 0 ]
initial
begin
	ALU_SEL_expected[0] = 1'bX;
end 
// expected BUS_SEL[ 3 ]
initial
begin
	BUS_SEL_expected[3] = 1'bX;
end 
// expected BUS_SEL[ 2 ]
initial
begin
	BUS_SEL_expected[2] = 1'bX;
end 
// expected BUS_SEL[ 1 ]
initial
begin
	BUS_SEL_expected[1] = 1'bX;
end 
// expected BUS_SEL[ 0 ]
initial
begin
	BUS_SEL_expected[0] = 1'bX;
end 
// expected INC[ 2 ]
initial
begin
	INC_expected[2] = 1'bX;
end 
// expected INC[ 1 ]
initial
begin
	INC_expected[1] = 1'bX;
end 
// expected INC[ 0 ]
initial
begin
	INC_expected[0] = 1'bX;
end 
// expected LOAD[ 3 ]
initial
begin
	LOAD_expected[3] = 1'bX;
end 
// expected LOAD[ 2 ]
initial
begin
	LOAD_expected[2] = 1'bX;
end 
// expected LOAD[ 1 ]
initial
begin
	LOAD_expected[1] = 1'bX;
end 
// expected LOAD[ 0 ]
initial
begin
	LOAD_expected[0] = 1'bX;
end 
// generate trigger
always @(ALU_OUT_expected or ALU_OUT or ALU_SEL_expected or ALU_SEL or BUS_SEL_expected or BUS_SEL or INC_expected or INC or LOAD_expected or LOAD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_OUT = %b | expected ALU_SEL = %b | expected BUS_SEL = %b | expected INC = %b | expected LOAD = %b | ",ALU_OUT_expected_prev,ALU_SEL_expected_prev,BUS_SEL_expected_prev,INC_expected_prev,LOAD_expected_prev);
	$display("| real ALU_OUT = %b | real ALU_SEL = %b | real BUS_SEL = %b | real INC = %b | real LOAD = %b | ",ALU_OUT_prev,ALU_SEL_prev,BUS_SEL_prev,INC_prev,LOAD_prev);
`endif
	if (
		( ALU_OUT_expected_prev[0] !== 1'bx ) && ( ALU_OUT_prev[0] !== ALU_OUT_expected_prev[0] )
		&& ((ALU_OUT_expected_prev[0] !== last_ALU_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[0] = ALU_OUT_expected_prev[0];
	end
	if (
		( ALU_OUT_expected_prev[1] !== 1'bx ) && ( ALU_OUT_prev[1] !== ALU_OUT_expected_prev[1] )
		&& ((ALU_OUT_expected_prev[1] !== last_ALU_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[1] = ALU_OUT_expected_prev[1];
	end
	if (
		( ALU_OUT_expected_prev[2] !== 1'bx ) && ( ALU_OUT_prev[2] !== ALU_OUT_expected_prev[2] )
		&& ((ALU_OUT_expected_prev[2] !== last_ALU_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[2] = ALU_OUT_expected_prev[2];
	end
	if (
		( ALU_OUT_expected_prev[3] !== 1'bx ) && ( ALU_OUT_prev[3] !== ALU_OUT_expected_prev[3] )
		&& ((ALU_OUT_expected_prev[3] !== last_ALU_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OUT_exp[3] = ALU_OUT_expected_prev[3];
	end
	if (
		( ALU_SEL_expected_prev[0] !== 1'bx ) && ( ALU_SEL_prev[0] !== ALU_SEL_expected_prev[0] )
		&& ((ALU_SEL_expected_prev[0] !== last_ALU_SEL_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_SEL_exp[0] = ALU_SEL_expected_prev[0];
	end
	if (
		( ALU_SEL_expected_prev[1] !== 1'bx ) && ( ALU_SEL_prev[1] !== ALU_SEL_expected_prev[1] )
		&& ((ALU_SEL_expected_prev[1] !== last_ALU_SEL_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_SEL_exp[1] = ALU_SEL_expected_prev[1];
	end
	if (
		( ALU_SEL_expected_prev[2] !== 1'bx ) && ( ALU_SEL_prev[2] !== ALU_SEL_expected_prev[2] )
		&& ((ALU_SEL_expected_prev[2] !== last_ALU_SEL_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_SEL_exp[2] = ALU_SEL_expected_prev[2];
	end
	if (
		( ALU_SEL_expected_prev[3] !== 1'bx ) && ( ALU_SEL_prev[3] !== ALU_SEL_expected_prev[3] )
		&& ((ALU_SEL_expected_prev[3] !== last_ALU_SEL_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_SEL_exp[3] = ALU_SEL_expected_prev[3];
	end
	if (
		( BUS_SEL_expected_prev[0] !== 1'bx ) && ( BUS_SEL_prev[0] !== BUS_SEL_expected_prev[0] )
		&& ((BUS_SEL_expected_prev[0] !== last_BUS_SEL_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL_expected_prev);
		$display ("     Real value = %b", BUS_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_SEL_exp[0] = BUS_SEL_expected_prev[0];
	end
	if (
		( BUS_SEL_expected_prev[1] !== 1'bx ) && ( BUS_SEL_prev[1] !== BUS_SEL_expected_prev[1] )
		&& ((BUS_SEL_expected_prev[1] !== last_BUS_SEL_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL_expected_prev);
		$display ("     Real value = %b", BUS_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_SEL_exp[1] = BUS_SEL_expected_prev[1];
	end
	if (
		( BUS_SEL_expected_prev[2] !== 1'bx ) && ( BUS_SEL_prev[2] !== BUS_SEL_expected_prev[2] )
		&& ((BUS_SEL_expected_prev[2] !== last_BUS_SEL_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL_expected_prev);
		$display ("     Real value = %b", BUS_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_SEL_exp[2] = BUS_SEL_expected_prev[2];
	end
	if (
		( BUS_SEL_expected_prev[3] !== 1'bx ) && ( BUS_SEL_prev[3] !== BUS_SEL_expected_prev[3] )
		&& ((BUS_SEL_expected_prev[3] !== last_BUS_SEL_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL_expected_prev);
		$display ("     Real value = %b", BUS_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_SEL_exp[3] = BUS_SEL_expected_prev[3];
	end
	if (
		( INC_expected_prev[0] !== 1'bx ) && ( INC_prev[0] !== INC_expected_prev[0] )
		&& ((INC_expected_prev[0] !== last_INC_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INC_exp[0] = INC_expected_prev[0];
	end
	if (
		( INC_expected_prev[1] !== 1'bx ) && ( INC_prev[1] !== INC_expected_prev[1] )
		&& ((INC_expected_prev[1] !== last_INC_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INC_exp[1] = INC_expected_prev[1];
	end
	if (
		( INC_expected_prev[2] !== 1'bx ) && ( INC_prev[2] !== INC_expected_prev[2] )
		&& ((INC_expected_prev[2] !== last_INC_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INC_exp[2] = INC_expected_prev[2];
	end
	if (
		( LOAD_expected_prev[0] !== 1'bx ) && ( LOAD_prev[0] !== LOAD_expected_prev[0] )
		&& ((LOAD_expected_prev[0] !== last_LOAD_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_expected_prev);
		$display ("     Real value = %b", LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LOAD_exp[0] = LOAD_expected_prev[0];
	end
	if (
		( LOAD_expected_prev[1] !== 1'bx ) && ( LOAD_prev[1] !== LOAD_expected_prev[1] )
		&& ((LOAD_expected_prev[1] !== last_LOAD_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_expected_prev);
		$display ("     Real value = %b", LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LOAD_exp[1] = LOAD_expected_prev[1];
	end
	if (
		( LOAD_expected_prev[2] !== 1'bx ) && ( LOAD_prev[2] !== LOAD_expected_prev[2] )
		&& ((LOAD_expected_prev[2] !== last_LOAD_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_expected_prev);
		$display ("     Real value = %b", LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LOAD_exp[2] = LOAD_expected_prev[2];
	end
	if (
		( LOAD_expected_prev[3] !== 1'bx ) && ( LOAD_prev[3] !== LOAD_expected_prev[3] )
		&& ((LOAD_expected_prev[3] !== last_LOAD_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_expected_prev);
		$display ("     Real value = %b", LOAD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LOAD_exp[3] = LOAD_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Control_Unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [10:0] IR;
reg [3:0] REG1;
reg [3:0] REG2;
// wires                                               
wire [3:0] ALU_OUT;
wire [3:0] ALU_SEL;
wire [3:0] BUS_SEL;
wire [2:0] INC;
wire [3:0] LOAD;

wire sampler;                             

// assign statements (if any)                          
Control_Unit i1 (
// port map - connection between master ports and signals/registers   
	.ALU_OUT(ALU_OUT),
	.ALU_SEL(ALU_SEL),
	.BUS_SEL(BUS_SEL),
	.CLK(CLK),
	.INC(INC),
	.IR(IR),
	.LOAD(LOAD),
	.REG1(REG1),
	.REG2(REG2)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 
// IR[ 10 ]
initial
begin
	IR[10] = 1'b0;
end 
// IR[ 9 ]
initial
begin
	IR[9] = 1'b0;
end 
// IR[ 8 ]
initial
begin
	IR[8] = 1'b0;
end 
// IR[ 7 ]
initial
begin
	IR[7] = 1'b0;
end 
// IR[ 6 ]
initial
begin
	IR[6] = 1'b1;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b0;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b0;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b0;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b0;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b0;
end 
// REG1[ 3 ]
initial
begin
	REG1[3] = 1'b0;
end 
// REG1[ 2 ]
initial
begin
	REG1[2] = 1'b0;
end 
// REG1[ 1 ]
initial
begin
	REG1[1] = 1'b0;
end 
// REG1[ 0 ]
initial
begin
	REG1[0] = 1'b1;
end 
// REG2[ 3 ]
initial
begin
	REG2[3] = 1'b0;
end 
// REG2[ 2 ]
initial
begin
	REG2[2] = 1'b0;
end 
// REG2[ 1 ]
initial
begin
	REG2[1] = 1'b1;
end 
// REG2[ 0 ]
initial
begin
	REG2[0] = 1'b0;
end 

Control_Unit_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.IR(IR),
	.REG1(REG1),
	.REG2(REG2),
	.sampler_tx(sampler)
);

Control_Unit_vlg_check_tst tb_out(
	.ALU_OUT(ALU_OUT),
	.ALU_SEL(ALU_SEL),
	.BUS_SEL(BUS_SEL),
	.INC(INC),
	.LOAD(LOAD),
	.sampler_rx(sampler)
);
endmodule

