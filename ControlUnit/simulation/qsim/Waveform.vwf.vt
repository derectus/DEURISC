// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2019 04:42:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_sample_tst(
	CLK,
	IR,
	V,
	sampler_tx
);
input  CLK;
input [10:0] IR;
input  V;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or IR or V)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ControlUnit_vlg_check_tst (
	ALU_SEL,
	BUS_SEL10,
	BUS_SEL11,
	BUS_SEL12,
	BUS_SEL13,
	LOADSEL,
	sampler_rx
);
input [3:0] ALU_SEL;
input  BUS_SEL10;
input  BUS_SEL11;
input  BUS_SEL12;
input  BUS_SEL13;
input [3:0] LOADSEL;
input sampler_rx;

reg [3:0] ALU_SEL_expected;
reg  BUS_SEL10_expected;
reg  BUS_SEL11_expected;
reg  BUS_SEL12_expected;
reg  BUS_SEL13_expected;
reg [3:0] LOADSEL_expected;

reg [3:0] ALU_SEL_prev;
reg  BUS_SEL10_prev;
reg  BUS_SEL11_prev;
reg  BUS_SEL12_prev;
reg  BUS_SEL13_prev;
reg [3:0] LOADSEL_prev;

reg [3:0] ALU_SEL_expected_prev;
reg  BUS_SEL10_expected_prev;
reg  BUS_SEL11_expected_prev;
reg  BUS_SEL12_expected_prev;
reg  BUS_SEL13_expected_prev;
reg [3:0] LOADSEL_expected_prev;

reg [3:0] last_ALU_SEL_exp;
reg  last_BUS_SEL10_exp;
reg  last_BUS_SEL11_exp;
reg  last_BUS_SEL12_exp;
reg  last_BUS_SEL13_exp;
reg [3:0] last_LOADSEL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_SEL_prev = ALU_SEL;
	BUS_SEL10_prev = BUS_SEL10;
	BUS_SEL11_prev = BUS_SEL11;
	BUS_SEL12_prev = BUS_SEL12;
	BUS_SEL13_prev = BUS_SEL13;
	LOADSEL_prev = LOADSEL;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_SEL_expected_prev = ALU_SEL_expected;
	BUS_SEL10_expected_prev = BUS_SEL10_expected;
	BUS_SEL11_expected_prev = BUS_SEL11_expected;
	BUS_SEL12_expected_prev = BUS_SEL12_expected;
	BUS_SEL13_expected_prev = BUS_SEL13_expected;
	LOADSEL_expected_prev = LOADSEL_expected;
end


// expected LOADSEL[ 3 ]
initial
begin
	LOADSEL_expected[3] = 1'bX;
end 
// expected LOADSEL[ 2 ]
initial
begin
	LOADSEL_expected[2] = 1'bX;
end 
// expected LOADSEL[ 1 ]
initial
begin
	LOADSEL_expected[1] = 1'bX;
end 
// expected LOADSEL[ 0 ]
initial
begin
	LOADSEL_expected[0] = 1'bX;
end 
// expected ALU_SEL[ 3 ]
initial
begin
	ALU_SEL_expected[3] = 1'bX;
end 
// expected ALU_SEL[ 2 ]
initial
begin
	ALU_SEL_expected[2] = 1'bX;
end 
// expected ALU_SEL[ 1 ]
initial
begin
	ALU_SEL_expected[1] = 1'bX;
end 
// expected ALU_SEL[ 0 ]
initial
begin
	ALU_SEL_expected[0] = 1'bX;
end 

// expected BUS_SEL13
initial
begin
	BUS_SEL13_expected = 1'bX;
end 

// expected BUS_SEL12
initial
begin
	BUS_SEL12_expected = 1'bX;
end 

// expected BUS_SEL11
initial
begin
	BUS_SEL11_expected = 1'bX;
end 

// expected BUS_SEL10
initial
begin
	BUS_SEL10_expected = 1'bX;
end 
// generate trigger
always @(ALU_SEL_expected or ALU_SEL or BUS_SEL10_expected or BUS_SEL10 or BUS_SEL11_expected or BUS_SEL11 or BUS_SEL12_expected or BUS_SEL12 or BUS_SEL13_expected or BUS_SEL13 or LOADSEL_expected or LOADSEL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_SEL = %b | expected BUS_SEL10 = %b | expected BUS_SEL11 = %b | expected BUS_SEL12 = %b | expected BUS_SEL13 = %b | expected LOADSEL = %b | ",ALU_SEL_expected_prev,BUS_SEL10_expected_prev,BUS_SEL11_expected_prev,BUS_SEL12_expected_prev,BUS_SEL13_expected_prev,LOADSEL_expected_prev);
	$display("| real ALU_SEL = %b | real BUS_SEL10 = %b | real BUS_SEL11 = %b | real BUS_SEL12 = %b | real BUS_SEL13 = %b | real LOADSEL = %b | ",ALU_SEL_prev,BUS_SEL10_prev,BUS_SEL11_prev,BUS_SEL12_prev,BUS_SEL13_prev,LOADSEL_prev);
`endif
	if (
		( ALU_SEL_expected_prev[0] !== 1'bx ) && ( ALU_SEL_prev[0] !== ALU_SEL_expected_prev[0] )
		&& ((ALU_SEL_expected_prev[0] !== last_ALU_SEL_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_SEL_exp[0] = ALU_SEL_expected_prev[0];
	end
	if (
		( ALU_SEL_expected_prev[1] !== 1'bx ) && ( ALU_SEL_prev[1] !== ALU_SEL_expected_prev[1] )
		&& ((ALU_SEL_expected_prev[1] !== last_ALU_SEL_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_SEL_exp[1] = ALU_SEL_expected_prev[1];
	end
	if (
		( ALU_SEL_expected_prev[2] !== 1'bx ) && ( ALU_SEL_prev[2] !== ALU_SEL_expected_prev[2] )
		&& ((ALU_SEL_expected_prev[2] !== last_ALU_SEL_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_SEL_exp[2] = ALU_SEL_expected_prev[2];
	end
	if (
		( ALU_SEL_expected_prev[3] !== 1'bx ) && ( ALU_SEL_prev[3] !== ALU_SEL_expected_prev[3] )
		&& ((ALU_SEL_expected_prev[3] !== last_ALU_SEL_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_SEL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_SEL_expected_prev);
		$display ("     Real value = %b", ALU_SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_SEL_exp[3] = ALU_SEL_expected_prev[3];
	end
	if (
		( BUS_SEL10_expected_prev !== 1'bx ) && ( BUS_SEL10_prev !== BUS_SEL10_expected_prev )
		&& ((BUS_SEL10_expected_prev !== last_BUS_SEL10_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL10_expected_prev);
		$display ("     Real value = %b", BUS_SEL10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_BUS_SEL10_exp = BUS_SEL10_expected_prev;
	end
	if (
		( BUS_SEL11_expected_prev !== 1'bx ) && ( BUS_SEL11_prev !== BUS_SEL11_expected_prev )
		&& ((BUS_SEL11_expected_prev !== last_BUS_SEL11_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL11_expected_prev);
		$display ("     Real value = %b", BUS_SEL11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_SEL11_exp = BUS_SEL11_expected_prev;
	end
	if (
		( BUS_SEL12_expected_prev !== 1'bx ) && ( BUS_SEL12_prev !== BUS_SEL12_expected_prev )
		&& ((BUS_SEL12_expected_prev !== last_BUS_SEL12_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL12_expected_prev);
		$display ("     Real value = %b", BUS_SEL12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_SEL12_exp = BUS_SEL12_expected_prev;
	end
	if (
		( BUS_SEL13_expected_prev !== 1'bx ) && ( BUS_SEL13_prev !== BUS_SEL13_expected_prev )
		&& ((BUS_SEL13_expected_prev !== last_BUS_SEL13_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_SEL13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_SEL13_expected_prev);
		$display ("     Real value = %b", BUS_SEL13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_BUS_SEL13_exp = BUS_SEL13_expected_prev;
	end
	if (
		( LOADSEL_expected_prev[0] !== 1'bx ) && ( LOADSEL_prev[0] !== LOADSEL_expected_prev[0] )
		&& ((LOADSEL_expected_prev[0] !== last_LOADSEL_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOADSEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOADSEL_expected_prev);
		$display ("     Real value = %b", LOADSEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LOADSEL_exp[0] = LOADSEL_expected_prev[0];
	end
	if (
		( LOADSEL_expected_prev[1] !== 1'bx ) && ( LOADSEL_prev[1] !== LOADSEL_expected_prev[1] )
		&& ((LOADSEL_expected_prev[1] !== last_LOADSEL_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOADSEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOADSEL_expected_prev);
		$display ("     Real value = %b", LOADSEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LOADSEL_exp[1] = LOADSEL_expected_prev[1];
	end
	if (
		( LOADSEL_expected_prev[2] !== 1'bx ) && ( LOADSEL_prev[2] !== LOADSEL_expected_prev[2] )
		&& ((LOADSEL_expected_prev[2] !== last_LOADSEL_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOADSEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOADSEL_expected_prev);
		$display ("     Real value = %b", LOADSEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LOADSEL_exp[2] = LOADSEL_expected_prev[2];
	end
	if (
		( LOADSEL_expected_prev[3] !== 1'bx ) && ( LOADSEL_prev[3] !== LOADSEL_expected_prev[3] )
		&& ((LOADSEL_expected_prev[3] !== last_LOADSEL_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOADSEL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOADSEL_expected_prev);
		$display ("     Real value = %b", LOADSEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LOADSEL_exp[3] = LOADSEL_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [10:0] IR;
reg V;
// wires                                               
wire [3:0] ALU_SEL;
wire BUS_SEL10;
wire BUS_SEL11;
wire BUS_SEL12;
wire BUS_SEL13;
wire [3:0] LOADSEL;

wire sampler;                             

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALU_SEL(ALU_SEL),
	.BUS_SEL10(BUS_SEL10),
	.BUS_SEL11(BUS_SEL11),
	.BUS_SEL12(BUS_SEL12),
	.BUS_SEL13(BUS_SEL13),
	.CLK(CLK),
	.IR(IR),
	.LOADSEL(LOADSEL),
	.V(V)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// V
initial
begin
	V = 1'b0;
end 
// IR[ 10 ]
initial
begin
	IR[10] = 1'b0;
end 
// IR[ 9 ]
initial
begin
	IR[9] = 1'b1;
end 
// IR[ 8 ]
initial
begin
	IR[8] = 1'b0;
end 
// IR[ 7 ]
initial
begin
	IR[7] = 1'b1;
end 
// IR[ 6 ]
initial
begin
	IR[6] = 1'b1;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b1;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b1;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b1;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b0;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b1;
end 

ControlUnit_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.IR(IR),
	.V(V),
	.sampler_tx(sampler)
);

ControlUnit_vlg_check_tst tb_out(
	.ALU_SEL(ALU_SEL),
	.BUS_SEL10(BUS_SEL10),
	.BUS_SEL11(BUS_SEL11),
	.BUS_SEL12(BUS_SEL12),
	.BUS_SEL13(BUS_SEL13),
	.LOADSEL(LOADSEL),
	.sampler_rx(sampler)
);
endmodule

