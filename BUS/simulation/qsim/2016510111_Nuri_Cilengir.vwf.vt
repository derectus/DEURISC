// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2019 03:20:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DEUARC_BUSYSTEM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DEUARC_BUSYSTEM_vlg_sample_tst(
	CLK,
	INPREG_DATA,
	M,
	SECLR,
	SEINR,
	SELD,
	SEMUX,
	WRITE,
	sampler_tx
);
input  CLK;
input [3:0] INPREG_DATA;
input  M;
input [3:0] SECLR;
input [3:0] SEINR;
input [3:0] SELD;
input [2:0] SEMUX;
input  WRITE;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or INPREG_DATA or M or SECLR or SEINR or SELD or SEMUX or WRITE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DEUARC_BUSYSTEM_vlg_check_tst (
	OUTREG,
	RESULT,
	sampler_rx
);
input [3:0] OUTREG;
input [3:0] RESULT;
input sampler_rx;

reg [3:0] OUTREG_expected;
reg [3:0] RESULT_expected;

reg [3:0] OUTREG_prev;
reg [3:0] RESULT_prev;

reg [3:0] OUTREG_expected_prev;
reg [3:0] RESULT_expected_prev;

reg [3:0] last_OUTREG_exp;
reg [3:0] last_RESULT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUTREG_prev = OUTREG;
	RESULT_prev = RESULT;
end

// update expected /o prevs

always @(trigger)
begin
	OUTREG_expected_prev = OUTREG_expected;
	RESULT_expected_prev = RESULT_expected;
end


// expected OUTREG[ 3 ]
initial
begin
	OUTREG_expected[3] = 1'b0;
end 
// expected OUTREG[ 2 ]
initial
begin
	OUTREG_expected[2] = 1'b0;
end 
// expected OUTREG[ 1 ]
initial
begin
	OUTREG_expected[1] = 1'b0;
end 
// expected OUTREG[ 0 ]
initial
begin
	OUTREG_expected[0] = 1'b0;
end 
// expected RESULT[ 3 ]
initial
begin
	RESULT_expected[3] = 1'bX;
end 
// expected RESULT[ 2 ]
initial
begin
	RESULT_expected[2] = 1'bX;
end 
// expected RESULT[ 1 ]
initial
begin
	RESULT_expected[1] = 1'bX;
end 
// expected RESULT[ 0 ]
initial
begin
	RESULT_expected[0] = 1'bX;
end 
// generate trigger
always @(OUTREG_expected or OUTREG or RESULT_expected or RESULT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUTREG = %b | expected RESULT = %b | ",OUTREG_expected_prev,RESULT_expected_prev);
	$display("| real OUTREG = %b | real RESULT = %b | ",OUTREG_prev,RESULT_prev);
`endif
	if (
		( OUTREG_expected_prev[0] !== 1'bx ) && ( OUTREG_prev[0] !== OUTREG_expected_prev[0] )
		&& ((OUTREG_expected_prev[0] !== last_OUTREG_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTREG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTREG_expected_prev);
		$display ("     Real value = %b", OUTREG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTREG_exp[0] = OUTREG_expected_prev[0];
	end
	if (
		( OUTREG_expected_prev[1] !== 1'bx ) && ( OUTREG_prev[1] !== OUTREG_expected_prev[1] )
		&& ((OUTREG_expected_prev[1] !== last_OUTREG_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTREG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTREG_expected_prev);
		$display ("     Real value = %b", OUTREG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTREG_exp[1] = OUTREG_expected_prev[1];
	end
	if (
		( OUTREG_expected_prev[2] !== 1'bx ) && ( OUTREG_prev[2] !== OUTREG_expected_prev[2] )
		&& ((OUTREG_expected_prev[2] !== last_OUTREG_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTREG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTREG_expected_prev);
		$display ("     Real value = %b", OUTREG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTREG_exp[2] = OUTREG_expected_prev[2];
	end
	if (
		( OUTREG_expected_prev[3] !== 1'bx ) && ( OUTREG_prev[3] !== OUTREG_expected_prev[3] )
		&& ((OUTREG_expected_prev[3] !== last_OUTREG_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTREG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTREG_expected_prev);
		$display ("     Real value = %b", OUTREG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTREG_exp[3] = OUTREG_expected_prev[3];
	end
	if (
		( RESULT_expected_prev[0] !== 1'bx ) && ( RESULT_prev[0] !== RESULT_expected_prev[0] )
		&& ((RESULT_expected_prev[0] !== last_RESULT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[0] = RESULT_expected_prev[0];
	end
	if (
		( RESULT_expected_prev[1] !== 1'bx ) && ( RESULT_prev[1] !== RESULT_expected_prev[1] )
		&& ((RESULT_expected_prev[1] !== last_RESULT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[1] = RESULT_expected_prev[1];
	end
	if (
		( RESULT_expected_prev[2] !== 1'bx ) && ( RESULT_prev[2] !== RESULT_expected_prev[2] )
		&& ((RESULT_expected_prev[2] !== last_RESULT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[2] = RESULT_expected_prev[2];
	end
	if (
		( RESULT_expected_prev[3] !== 1'bx ) && ( RESULT_prev[3] !== RESULT_expected_prev[3] )
		&& ((RESULT_expected_prev[3] !== last_RESULT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[3] = RESULT_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DEUARC_BUSYSTEM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [3:0] INPREG_DATA;
reg M;
reg [3:0] SECLR;
reg [3:0] SEINR;
reg [3:0] SELD;
reg [2:0] SEMUX;
reg WRITE;
// wires                                               
wire [3:0] OUTREG;
wire [3:0] RESULT;

wire sampler;                             

// assign statements (if any)                          
DEUARC_BUSYSTEM i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.INPREG_DATA(INPREG_DATA),
	.M(M),
	.OUTREG(OUTREG),
	.RESULT(RESULT),
	.SECLR(SECLR),
	.SEINR(SEINR),
	.SELD(SELD),
	.SEMUX(SEMUX),
	.WRITE(WRITE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 
// SECLR[ 3 ]
initial
begin
	SECLR[3] = 1'b0;
end 
// SECLR[ 2 ]
initial
begin
	SECLR[2] = 1'b0;
end 
// SECLR[ 1 ]
initial
begin
	SECLR[1] = 1'b0;
end 
// SECLR[ 0 ]
initial
begin
	SECLR[0] = 1'b0;
end 
// INPREG_DATA[ 3 ]
initial
begin
	INPREG_DATA[3] = 1'b1;
end 
// INPREG_DATA[ 2 ]
initial
begin
	INPREG_DATA[2] = 1'b0;
end 
// INPREG_DATA[ 1 ]
initial
begin
	INPREG_DATA[1] = 1'b1;
end 
// INPREG_DATA[ 0 ]
initial
begin
	INPREG_DATA[0] = 1'b1;
end 
// SEINR[ 3 ]
initial
begin
	SEINR[3] = 1'b0;
end 
// SEINR[ 2 ]
initial
begin
	SEINR[2] = 1'b0;
end 
// SEINR[ 1 ]
initial
begin
	SEINR[1] = 1'b0;
end 
// SEINR[ 0 ]
initial
begin
	SEINR[0] = 1'b0;
end 
// SELD[ 3 ]
initial
begin
	SELD[3] = 1'b0;
end 
// SELD[ 2 ]
initial
begin
	SELD[2] = 1'b1;
	SELD[2] = #140000 1'b0;
	SELD[2] = #320000 1'b1;
	SELD[2] = #160000 1'b0;
	SELD[2] = #150000 1'b1;
end 
// SELD[ 1 ]
initial
begin
	SELD[1] = 1'b1;
	SELD[1] = #140000 1'b0;
	SELD[1] = #140000 1'b1;
	SELD[1] = #180000 1'b0;
	SELD[1] = #310000 1'b1;
end 
// SELD[ 0 ]
initial
begin
	SELD[0] = 1'b0;
	SELD[0] = #280000 1'b1;
	SELD[0] = #180000 1'b0;
	SELD[0] = #310000 1'b1;
end 

// M
initial
begin
	M = 1'b0;
	M = #140000 1'b1;
	M = #140000 1'b0;
end 
// SEMUX[ 2 ]
initial
begin
	SEMUX[2] = 1'b1;
	SEMUX[2] = #140000 1'b0;
	SEMUX[2] = #480000 1'b1;
	SEMUX[2] = #150000 1'b0;
end 
// SEMUX[ 1 ]
initial
begin
	SEMUX[1] = 1'b0;
	SEMUX[1] = #280000 1'b1;
	SEMUX[1] = #180000 1'b0;
end 
// SEMUX[ 0 ]
initial
begin
	SEMUX[0] = 1'b1;
	SEMUX[0] = #140000 1'b0;
end 

// WRITE
initial
begin
	WRITE = 1'b0;
end 

DEUARC_BUSYSTEM_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.INPREG_DATA(INPREG_DATA),
	.M(M),
	.SECLR(SECLR),
	.SEINR(SEINR),
	.SELD(SELD),
	.SEMUX(SEMUX),
	.WRITE(WRITE),
	.sampler_tx(sampler)
);

DEUARC_BUSYSTEM_vlg_check_tst tb_out(
	.OUTREG(OUTREG),
	.RESULT(RESULT),
	.sampler_rx(sampler)
);
endmodule

